name: Get Supabase Branch Environment and Deploy

on:
  push:
    branches-ignore:
      - main
  issue_comment:
    types: [created, edited]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run on push events, workflow_dispatch, or when supabase bot comments with all check marks
    if: |
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       github.event.comment.user.login == 'supabase[bot]' &&
       contains(github.event.comment.body, '| Database    | ✅ |') &&
       contains(github.event.comment.body, '| Services    | ✅  |') &&
       contains(github.event.comment.body, '| APIs        | ✅      |') &&
       contains(github.event.comment.body, '| Configurations | ✅ |') &&
       contains(github.event.comment.body, '| Migrations     | ✅ |') &&
       contains(github.event.comment.body, '| Seeding        | ✅   |') &&
       contains(github.event.comment.body, '| Edge Functions | ✅  |'))

    steps:
      - name: Set branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'issue_comment' && steps.branch.outputs.name || github.ref }}

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Check Supabase CLI version
        run: supabase --version

      - name: Log Supabase branch info
        run: |
          echo "Checking for Supabase branch information..."
          echo "Target branch: ${{ steps.branch.outputs.name }}"

          # Check if supabase directory exists
          if [ -d "supabase" ]; then
            echo "Supabase directory found"

            # Get branch env and output to file
            echo "Getting branch env for: ${{ steps.branch.outputs.name }}"
            if supabase branches get "${{ steps.branch.outputs.name }}" --experimental -o env > .supabase_branch_env; then
              echo "Branch env retrieved successfully and saved to .supabase_branch_env"

              # Add NEXT_PUBLIC_ versions of SUPABASE_URL and SUPABASE_ANON_KEY
              echo "Adding NEXT_PUBLIC_ versions of env variables..."
              if grep -q "^SUPABASE_URL=" .supabase_branch_env; then
                SUPABASE_URL=$(grep "^SUPABASE_URL=" .supabase_branch_env | cut -d'=' -f2-)
                echo "NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}" >> .supabase_branch_env
              fi
              if grep -q "^SUPABASE_ANON_KEY=" .supabase_branch_env; then
                SUPABASE_ANON_KEY=$(grep "^SUPABASE_ANON_KEY=" .supabase_branch_env | cut -d'=' -f2-)
                echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .supabase_branch_env
              fi

              echo "Contents of .supabase_branch_env:"
              cat .supabase_branch_env
            else
              echo "Unable to retrieve branch env - branch may not exist or authentication may be needed"
              # Remove any created file since the command failed
              rm -f .supabase_branch_env
            fi
          else
            echo "No supabase directory found in repository"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Build application
        run: |
          vercel pull --token=${{ secrets.VERCEL_TOKEN }} --yes

          # Source the env file if it exists
          if [ -f .supabase_branch_env ]; then
            echo "Loading Supabase branch environment variables"
            set -a
            source .supabase_branch_env
            set +a
          fi

          vercel build

      - name: Deploy to Vercel
        run: |
          # Set common Vercel environment variables
          VERCEL_ENV_VARS="-e VERCEL_ENV=preview \
            -e VERCEL_GIT_PROVIDER=github \
            -e VERCEL_GIT_REPO_SLUG=${{ github.event.repository.name }} \
            -e VERCEL_GIT_REPO_OWNER=${{ github.repository_owner }} \
            -e VERCEL_GIT_REPO_ID=${{ github.event.repository.id }} \
            -e VERCEL_GIT_COMMIT_REF=${{ steps.branch.outputs.name }} \
            -e VERCEL_GIT_COMMIT_SHA=${GITHUB_SHA} \
            -e VERCEL_GIT_COMMIT_MESSAGE='${{ github.event.head_commit.message || github.event.comment.body || 'Deploy from GitHub Action' }}' \
            -e VERCEL_GIT_COMMIT_AUTHOR_LOGIN=${{ github.actor }} \
            -e VERCEL_GIT_COMMIT_AUTHOR_NAME='${{ github.event.head_commit.author.name || github.actor }}'"
          
          # Add PR ID if this is triggered by a PR comment
          if [ -n "${{ github.event.issue.number }}" ]; then
            VERCEL_ENV_VARS="$VERCEL_ENV_VARS -e VERCEL_GIT_PULL_REQUEST_ID=${{ github.event.issue.number }}"
          fi
          
          # Deploy with env vars from .supabase_branch_env if it exists
          if [ -f .supabase_branch_env ]; then
            echo "Deploying with Supabase branch environment variables"
            # Convert env file to Vercel -e flags using xargs and capture deployment URL
            DEPLOYMENT_URL=$(grep -v '^#' .supabase_branch_env | grep -v '^$' | sed 's/^/-e /' | xargs vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --yes --target=preview --skip-domain $VERCEL_ENV_VARS)
          else
            echo "Deploying without Supabase branch environment variables"
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --yes --target=preview --skip-domain $VERCEL_ENV_VARS)
          fi

          echo "Deployment URL: $DEPLOYMENT_URL"

          # Create branch-based alias (similar to GitHub integration)
          BRANCH_ALIAS="${{ steps.branch.outputs.name }}-${{ github.event.repository.name }}.vercel.app"
          echo "Setting alias: $BRANCH_ALIAS"
          vercel alias set "$DEPLOYMENT_URL" "$BRANCH_ALIAS" --token=${{ secrets.VERCEL_TOKEN }} --yes || echo "Failed to set alias (may require project domain configuration)"
